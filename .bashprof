alias ll="ls -alF"
alias findh="find . -name"
alias cdd="cd ~/dev"
alias mv="mv -i"
alias rxvt="rxvt -sl 20000 -vb -geometry 100x37+19+19"
alias xterm="xterm -sl 5000 -sb -ms green -bd brown -geometry 100x37+19+19"
alias pry="pry -r ./config/environment"

export HITHERE="hi there"
export EDITOR="/usr/bin/vim"

# to enable homebrew git tab completion
if [ -f $(brew --prefix)/etc/bash_completion.d/git-completion.bash ]; then
  . $(brew --prefix)/etc/bash_completion.d/git-completion.bash
fi

# Add `jump`, `mark`, and `marks` commands to make filesystem navigation shortcuts.
# http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
export MARKPATH=$HOME/.marks
function jump {
  cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark {
  mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark {
  rm -i "$MARKPATH/$1"
}
function marks {
  ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
}
_completemarks() {
  local curw=${COMP_WORDS[COMP_CWORD]}
  local wordlist=$(find $MARKPATH -type l -printf "%f\n")
  COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
  return 0
}
complete -F _completemarks jump unmark


# The following two lines make it so that up and down arrow
# in bash is a filtered search through history based on the
# characters you've entered in your prompt
# For example: typing g then up arrow will iterate through
# your history of commands that  started with g.
# The more characters you type the more specific the search is.
# To revert to normal up/down arrow functionality just
# don't type anything before using the arrow keys
bind '"\e[A": history-search-backward' #up-arrow through history
bind '"\e[B": history-search-forward' #down-arrow through history

#function parse_git_dirty {
#  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working directory clean" ]] && [[ $(git status 2> /dev/null | tail -2 | head -1) != "nothing to commit, working directory clean" ]] && [[ $(git status 2> /dev/null | tail -3 | head -1) != "nothing to commit, working directory clean" ]] && echo " * "
#}

function parse_git_dirty {
  if git log &> /dev/null; then
    git_prompt="(";
    [[ "$(git status 2> /dev/null)" != *nothing\ to\ commit,\ working\ directory\ clean* ]] && git_prompt="$git_prompt * ";
    echo "$git_prompt$(parse_git_branch))"
  fi
}

function parse_git_branch {
  ref=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e '/^[ *]*/s///')
  if [[ $ref != '' ]]; then
    echo "$ref"
  fi
}
ORANGE=$(tput setaf 172)
# ⮀ ± ⭠ ➦ ✔ ✘ ⚡
# alt-shift-9 ·, alt-shift-4 ›
export PS1="\[\e]2;\w\a\[\e[0;35m\]\# \[\e[0;33m\]\W\[\e[0;32m\]\$(parse_git_dirty)\[\e[$ORANGE\]·›\[\e[0m\] "

# trap commands and echo them to xterm / Terminal titlebar. Must be last line.
# (from http://unix.stackexchange.com/questions/11223/change-terminal-title)
#trap 'echo -ne "\033]2;$BASH_COMMAND>$(pwd)\007"' DEBUG

